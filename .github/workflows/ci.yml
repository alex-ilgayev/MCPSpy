name: CI

on:
  push:
    branches: [ci-cd]
    tags: ["v*"]
  pull_request:
    branches: [ci-cd]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE: loncarales/mcpspy

permissions:
  contents: read

jobs:
  # Job to run linters, unit tests, and E2E tests on a single platform (e.g., AMD64)
  # This provides quick feedback on code quality and functionality.
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install build dependencies (for linting/testing on host)
        run: |
          sudo apt-get update
          sudo apt-get install -y clang clang-format llvm make libbpf-dev build-essential

      - name: Install Go development tools (golangci-lint, bpf2go)
        run: |
          go install github.com/cilium/ebpf/cmd/bpf2go@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Download Go modules
        run: go mod download

      - name: Run linters
        run: make lint

      # Generate eBPF Go bindings on the host (amd64) for local test builds.
      # This doesn't produce cross-arch binaries for release, just the Go source files.
      - name: Generate eBPF Go bindings
        run: make generate

      - name: Build local binary for testing
        run: |
          mkdir -p build
          # Ensure CGO_ENABLED=1 for local test build as eBPF needs it
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -o build/mcpspy-linux-amd64 ./cmd/mcpspy

      - name: Run unit tests
        run: make test

      - name: Run end-to-end tests
        # Requires root/privileged access due to eBPF.
        run: sudo -E make test-e2e

# Job to build cross-platform binaries as release assets
  build_binaries:
    needs: [test]
    strategy:
      matrix:
        include:
        - os: ubuntu-24.04
          goos: linux
          goarch: amd64
        - os: ubuntu-24.04-arm
          goos: linux
          goarch: arm64

    runs-on: ${{ matrix.os }} # The runner type depends on the matrix entry

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install build dependencies for CGO (on ${{ matrix.goarch }} target)
        run: |
          sudo apt-get update
          # For now, let's try the simpler approach, relying on Go's CGO cross-compilation capabilities
          # and assuming `libbpf` headers are generic enough or implicitly handled.
          sudo apt-get install -y clang llvm make libbpf-dev build-essential

      - name: Install Go tools
        run: |
          go install github.com/cilium/ebpf/cmd/bpf2go@latest

      - name: Download dependencies
        run: go mod download
      - name: Generate eBPF Go bindings
        # This step uses `bpf2go`. `bpf2go` generates Go source files from C BPF.
        # It needs `clang` and `llvm` which were installed above.
        # This output should be compatible with the target architecture binary.
        run: make generate

      - name: Build binary for ${{ matrix.goos }}-${{ matrix.goarch }}
        # CGO_ENABLED MUST BE 1 for eBPF programs!
        # This will use the CGO toolchain on the `ubuntu-latest` runner to build for the target architecture.
        run: |
          mkdir -p build
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=1 go build \
            -ldflags "-X github.com/alex-ilgayev/mcpspy/pkg/version.Version=$(git describe --tags --always --dirty 2>/dev/null || echo 'dev') \
                      -X github.com/alex-ilgayev/mcpspy/pkg/version.Commit=$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown') \
                      -X github.com/alex-ilgayev/mcpspy/pkg/version.Date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            -trimpath \
            -o build/mcpspy-${{ matrix.goos }}-${{ matrix.goarch }} \
            ./cmd/mcpspy

      - name: Create checksum
        run: |
          cd build
          sha256sum mcpspy-${{ matrix.goos }}-${{ matrix.goarch }} > mcpspy-${{ matrix.goos }}-${{ matrix.goarch }}.sha256sum
      - name: Run unit tests
        run: make test

      - name: Upload ${{ matrix.goos }}-${{ matrix.goarch }} binary
        uses: actions/upload-artifact@v4
        with:
          name: mcpspy-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/

# Job to build and push multi-platform Docker images
  docker_build_and_push:
    needs: [test] # Ensure tests pass before building and pushing Docker image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tags
        id: determine_tags
        run: |
          TAGS="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest"
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            TAGS="$TAGS,${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}"
          fi
          echo "DOCKER_TAGS=$TAGS" >> $GITHUB_ENV

      - name: Build and push Docker image (multi-platform)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKER_TAGS }}
#
#   release:
#     needs: [build, docker]
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#       packages: write
#     if: startsWith(github.ref, 'refs/tags/')
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#
#       - name: Set up QEMU for multi-platform builds
#         uses: docker/setup-qemu-action@v3
#
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#
#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#
#       - name: Build and push Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           file: ./deploy/docker/Dockerfile
#           platforms: linux/amd64,linux/arm64 # Ensure release image is also multi-platform
#           push: true
#           tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
#
#       - name: Download artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: mcpspy-binaries # Name matches the upload from the 'build' job
#
#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v1
#         with:
#           files: mcpspy-binaries/*
#           draft: false
#           prerelease: false
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
