name: CI

on:
  push:
    branches: [ci-cd]
    tags: ["v*"]
  pull_request:
    branches: [ci-cd]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE: loncarales/mcpspy

permissions:
  contents: read

jobs:
  # Job to run linters, unit tests, and E2E tests on a single platform (e.g., AMD64)
  # This provides quick feedback on code quality and functionality.
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install build dependencies (for linting/testing on host)
        run: |
          sudo apt-get update
          sudo apt-get install -y clang clang-format llvm make libbpf-dev build-essential

      - name: Install Go development tools (golangci-lint, bpf2go)
        run: |
          go install github.com/cilium/ebpf/cmd/bpf2go@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Download Go modules
        run: go mod download

      - name: Run linters
        run: make lint

      # Generate eBPF Go bindings on the host (amd64) for local test builds.
      # This doesn't produce cross-arch binaries for release, just the Go source files.
      - name: Generate eBPF Go bindings
        run: make generate

      - name: Build local binary for testing
        run: |
          mkdir -p build
          # Ensure CGO_ENABLED=1 for local test build as eBPF needs it
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -o build/mcpspy-linux-amd64 ./cmd/mcpspy

      - name: Run unit tests
        run: make test

      - name: Run end-to-end tests
        # Requires root/privileged access due to eBPF.
        run: sudo -E make test-e2e
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#
#       - name: Set up Go
#         uses: actions/setup-go@v5
#         with:
#           go-version: "1.24"
#
#       - name: Install dependencies
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y clang llvm make libbpf-dev
#
#       - name: Install Go tools
#         run: |
#           go install github.com/cilium/ebpf/cmd/bpf2go@latest
#
#       - name: Download dependencies
#         run: go mod download
#
#       - name: Build release artifacts with checksums
#         run: make build-release
#
#       - name: Run unit tests
#         run: make test
#
#       - name: Run end-to-end tests
#         run: make test-e2e
#
#       - name: Upload binaries
#         uses: actions/upload-artifact@v4
#         with:
#           name: mcpspy-binaries
#           path: |
#             build/mcpspy-linux-amd64
#             build/mcpspy-linux-arm64
#             build/checksums.txt
#           retention-days: 30
#
#   docker:
#     needs: [build]
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push'
#     permissions:
#       contents: read
#       packages: write
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#
#       - name: Set up QEMU for multi-platform builds
#         uses: docker/setup-qemu-action@v3
#
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#
#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.DOCKER_REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#
#       - name: Build and push Docker image (multi-platform)
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           file: ./deploy/docker/Dockerfile
#           # Use multiple platforms. Buildx will handle the cross-compilation.
#           platforms: linux/amd64,linux/arm64
#           push: true
#           tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
#
#   release:
#     needs: [build, docker]
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#       packages: write
#     if: startsWith(github.ref, 'refs/tags/')
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#
#       - name: Set up QEMU for multi-platform builds
#         uses: docker/setup-qemu-action@v3
#
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#
#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#
#       - name: Build and push Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           file: ./deploy/docker/Dockerfile
#           platforms: linux/amd64,linux/arm64 # Ensure release image is also multi-platform
#           push: true
#           tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
#
#       - name: Download artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: mcpspy-binaries # Name matches the upload from the 'build' job
#
#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v1
#         with:
#           files: mcpspy-binaries/*
#           draft: false
#           prerelease: false
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
