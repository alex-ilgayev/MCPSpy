name: Kubernetes Deployment Test

on:
  pull_request:
    paths:
      - 'deploy/kubernetes/**'
      - 'deploy/docker/**'
      - '.github/workflows/k8s-test.yml'
  schedule:
    # Weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-test-image:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang llvm make libbpf-dev build-essential

      - name: Install Go tools
        run: go install github.com/cilium/ebpf/cmd/bpf2go@latest

      - name: Download dependencies
        run: go mod download

      - name: Build binary for testing
        run: make build

      - name: Build Docker image for testing
        run: |
          # Move the built binary for Docker build
          mv build/mcpspy-linux-amd64 deploy/docker/mcpspy
          docker build -t test-mcpspy:latest -f deploy/docker/Dockerfile deploy/docker/
          rm deploy/docker/mcpspy

      - name: Save Docker image as artifact
        run: |
          docker save test-mcpspy:latest -o /tmp/test-mcpspy.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-mcpspy-image
          path: /tmp/test-mcpspy.tar
          retention-days: 1

  k8s-deployment-test:
    needs: build-test-image
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        k8s-version: ["v1.31.9", "v1.32.5", "v1.33.1"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: test-mcpspy-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load -i /tmp/test-mcpspy.tar
          docker images

      - name: Set up kind (Kubernetes in Docker)
        uses: helm/kind-action@v1
        with:
          version: v0.29.0
          cluster_name: mcpspy-test
          node_image: kindest/node:${{ matrix.k8s-version }}
          wait: 60s

      - name: Verify kind cluster
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Load Docker image into kind
        run: |
          kind load docker-image test-mcpspy:latest --name mcpspy-test

      - name: Update manifest to use test image
        run: |
          # Create a temporary manifest with the test image
          sed 's|image: ghcr.io/alex-ilgayev/mcpspy:v0.0.3|image: test-mcpspy:latest|g' \
            deploy/kubernetes/mcpspy.yaml > /tmp/mcpspy-test.yaml
          sed -i 's|imagePullPolicy: Always|imagePullPolicy: IfNotPresent|g' /tmp/mcpspy-test.yaml

      - name: Deploy MCPSpy to kind cluster
        run: |
          kubectl apply -f /tmp/mcpspy-test.yaml

      - name: Wait for namespace to be created
        run: |
          kubectl wait --for=jsonpath='{.status.phase}'=Active namespace/mcpspy --timeout=30s

      - name: Wait for DaemonSet to be ready
        run: |
          # Wait for DaemonSet to be created
          kubectl wait --for=condition=available --timeout=120s daemonset/mcpspy -n mcpspy || true

          # Check DaemonSet rollout status
          kubectl rollout status daemonset/mcpspy -n mcpspy --timeout=120s

      - name: Verify pods are running
        run: |
          echo "=== DaemonSet Status ==="
          kubectl get daemonset -n mcpspy

          echo -e "\n=== Pod Status ==="
          kubectl get pods -n mcpspy -o wide

          echo -e "\n=== Pod Details ==="
          kubectl describe pods -n mcpspy

          # Verify at least one pod is running
          RUNNING_PODS=$(kubectl get pods -n mcpspy -o json | jq '.items | length')
          if [ "$RUNNING_PODS" -eq 0 ]; then
            echo "ERROR: No pods are running"
            exit 1
          fi

          # Verify pods are in Running state
          NOT_RUNNING=$(kubectl get pods -n mcpspy --field-selector=status.phase!=Running --no-headers 2>/dev/null | wc -l)
          if [ "$NOT_RUNNING" -gt 0 ]; then
            echo "ERROR: Some pods are not in Running state"
            exit 1
          fi

          echo "SUCCESS: All pods are running"

      - name: Verify MCPSpy process is running
        run: |
          # Get the first pod name
          POD_NAME=$(kubectl get pods -n mcpspy -o jsonpath='{.items[0].metadata.name}')

          echo "Checking MCPSpy process in pod: $POD_NAME"

          # Check if mcpspy process is running
          kubectl exec -n mcpspy "$POD_NAME" -- pgrep mcpspy

          echo "SUCCESS: MCPSpy process is running"

      - name: Test MCPSpy functionality
        run: |
          # Get the first pod name
          POD_NAME=$(kubectl get pods -n mcpspy -o jsonpath='{.items[0].metadata.name}')

          echo "Testing MCPSpy in pod: $POD_NAME"

          # Check if output directory exists
          kubectl exec -n mcpspy "$POD_NAME" -- ls -la /output

          # Check if mcpspy is writing to output file (file may be empty if no MCP traffic)
          kubectl exec -n mcpspy "$POD_NAME" -- ls -lh /output/mcpspy.jsonl || echo "Output file not created yet (no MCP traffic detected)"

          echo "SUCCESS: MCPSpy is configured correctly"

      - name: Check liveness and readiness probes
        run: |
          # Wait a bit for probes to run
          sleep 15

          # Get pod status and check probes
          POD_NAME=$(kubectl get pods -n mcpspy -o jsonpath='{.items[0].metadata.name}')

          echo "=== Pod Conditions ==="
          kubectl get pod -n mcpspy "$POD_NAME" -o jsonpath='{.status.conditions[*]}' | jq

          # Verify pod is ready
          POD_READY=$(kubectl get pod -n mcpspy "$POD_NAME" -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}')
          if [ "$POD_READY" != "True" ]; then
            echo "ERROR: Pod is not ready"
            exit 1
          fi

          echo "SUCCESS: Probes are working correctly"

      - name: Basic functional tests (detect MCP communication)
        run: |
          echo "=== Deploying MCP test server pod ==="

          # Create a simple MCP test pod that runs the server and client
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Pod
          metadata:
            name: mcp-test-client
            namespace: default
          spec:
            restartPolicy: Never
            containers:
            - name: mcp-client
              image: python:3.12-slim
              command: ["/bin/bash", "-c"]
              args:
                - |
                  set -e
                  echo "Installing MCP SDK..."
                  pip install --quiet mcp httpx

                  echo "Creating MCP server..."
                  cat > /tmp/mcp_server.py <<'SERVEREOF'
                  from mcp.server.fastmcp import FastMCP
                  mcp = FastMCP("test-server")

                  @mcp.tool()
                  def add(a: int, b: int) -> int:
                      """Add two numbers"""
                      return a + b

                  if __name__ == "__main__":
                      mcp.run(transport="stdio")
                  SERVEREOF

                  echo "Creating MCP client..."
                  cat > /tmp/mcp_client.py <<'CLIENTEOF'
                  import asyncio
                  from mcp import ClientSession, StdioServerParameters
                  from mcp.client.stdio import stdio_client

                  async def main():
                      server_params = StdioServerParameters(
                          command="python",
                          args=["/tmp/mcp_server.py"],
                      )

                      async with stdio_client(server_params) as (read, write):
                          async with ClientSession(read, write) as session:
                              await session.initialize()
                              print("Session initialized")

                              # List tools
                              tools = await session.list_tools()
                              print(f"Available tools: {[t.name for t in tools.tools]}")

                              # Call a tool
                              result = await session.call_tool("add", {"a": 5, "b": 3})
                              print(f"Tool result: {result}")

                  if __name__ == "__main__":
                      asyncio.run(main())
                  CLIENTEOF

                  echo "Running MCP client to generate traffic..."
                  python /tmp/mcp_client.py

                  echo "MCP test completed successfully"
                  sleep 5
          EOF

          echo "=== Waiting for MCP test pod to complete ==="
          kubectl wait --for=condition=Ready pod/mcp-test-client -n default --timeout=120s || true
          kubectl wait --for=jsonpath='{.status.phase}'=Succeeded pod/mcp-test-client -n default --timeout=120s || {
            echo "MCP test pod did not complete successfully"
            kubectl logs -n default mcp-test-client || true
            exit 1
          }

          echo "=== MCP test pod logs ==="
          kubectl logs -n default mcp-test-client

          echo "=== Checking MCPSpy logs for detected MCP communication ==="
          # Give MCPSpy a moment to process and write the events
          sleep 5

          POD_NAME=$(kubectl get pods -n mcpspy -o jsonpath='{.items[0].metadata.name}')

          # Check if MCPSpy output file exists and has content
          if ! kubectl exec -n mcpspy "$POD_NAME" -- test -f /output/mcpspy.jsonl; then
            echo "ERROR: MCPSpy output file does not exist"
            echo "=== MCPSpy logs ==="
            kubectl logs -n mcpspy "$POD_NAME" --tail=50
            exit 1
          fi

          # Check if file has content
          OUTPUT_SIZE=$(kubectl exec -n mcpspy "$POD_NAME" -- wc -l /output/mcpspy.jsonl | awk '{print $1}')
          if [ "$OUTPUT_SIZE" -eq 0 ]; then
            echo "ERROR: MCPSpy did not capture any MCP messages"
            echo "=== MCPSpy logs ==="
            kubectl logs -n mcpspy "$POD_NAME" --tail=50
            exit 1
          fi

          echo "=== MCPSpy captured $OUTPUT_SIZE messages ==="

          # Display first few captured messages
          echo "=== Sample MCPSpy output (first 5 lines) ==="
          kubectl exec -n mcpspy "$POD_NAME" -- head -5 /output/mcpspy.jsonl

          # Verify we captured MCP initialize request
          if kubectl exec -n mcpspy "$POD_NAME" -- grep -q '"method":"initialize"' /output/mcpspy.jsonl; then
            echo "✅ MCPSpy successfully detected MCP initialize request"
          else
            echo "⚠️  Warning: Did not find 'initialize' method in captured messages"
          fi

          # Verify we captured tools/list request
          if kubectl exec -n mcpspy "$POD_NAME" -- grep -q '"method":"tools/list"' /output/mcpspy.jsonl; then
            echo "✅ MCPSpy successfully detected tools/list request"
          else
            echo "⚠️  Warning: Did not find 'tools/list' method in captured messages"
          fi

          # Verify we captured tools/call request
          if kubectl exec -n mcpspy "$POD_NAME" -- grep -q '"method":"tools/call"' /output/mcpspy.jsonl; then
            echo "✅ MCPSpy successfully detected tools/call request"
          else
            echo "⚠️  Warning: Did not find 'tools/call' method in captured messages"
          fi

          echo ""
          echo "SUCCESS: MCPSpy functional test completed - detected MCP communication"

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Collecting diagnostic information ==="

          echo -e "\n=== Namespace Events ==="
          kubectl get events -n mcpspy --sort-by='.lastTimestamp'

          echo -e "\n=== DaemonSet Description ==="
          kubectl describe daemonset -n mcpspy || true

          echo -e "\n=== Pod Logs ==="
          for pod in $(kubectl get pods -n mcpspy -o jsonpath='{.items[*].metadata.name}'); do
            echo -e "\n--- Logs from pod: $pod ---"
            kubectl logs -n mcpspy "$pod" --tail=100 || true
          done

          echo -e "\n=== Node Information ==="
          kubectl get nodes -o wide

          echo -e "\n=== All Resources in mcpspy namespace ==="
          kubectl get all -n mcpspy

      - name: Cleanup
        if: always()
        run: |
          kubectl delete namespace mcpspy --timeout=60s || true
